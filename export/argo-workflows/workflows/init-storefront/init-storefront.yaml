apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: init-storefront-template
spec:
  arguments:
    parameters:
      - name: resource
        value: "JSON"
  templates:
    - name: init-storefront
      inputs:
        parameters:
          - name: resource
      steps:
      - - name: parse
          template: parser
          arguments:
            parameters:
            - name: json
              value: "{{inputs.parameters.resource}}"
      - - name: installer-content
          template: install-content 
          arguments:
            parameters:
            - name: namespace
              value: "{{steps.parse.outputs.parameters.namespace}}"
            - name: instance
              value: "{{steps.parse.outputs.parameters.instance}}"
  
    - name: parser
      inputs:
        parameters:
          - name: json
      container:
        image: kkisilevsky/alpine-jq
        command: [sh, -c]
        args:
          - "echo -n '{{inputs.parameters.json}}' | jq -r '.metadata.namespace' > /tmp/namespace.txt
          && echo -n '{{inputs.parameters.json}}' | jq -r '.metadata.labels.instance' > /tmp/instance.txt"
      outputs:
        parameters:
          - name: namespace
            valueFrom:
              path: /tmp/namespace.txt
          - name: instance
            valueFrom:
              path: /tmp/instance.txt

    - name: install-content
      inputs:
        parameters:
          - name: namespace
          - name: instance
      resource:
        action: create
        manifest: |               #put your kubernetes spec here
          apiVersion: batch/v1
          kind: Job
          metadata:
            generateName: content-installer-job-
            namespace: "{{inputs.parameters.namespace}}"
          spec:
            ttlSecondsAfterFinished: 10
            template:
              metadata:
                name: content-installer
              spec:
                initContainers:
                - name: content-installer
                  image: docker.pkg.github.com/virtocommerce/vc-deploy-containers/platform-installer:v3
                  envFrom:
                  - configMapRef:
                      name: {{inputs.parameters.instance}}-deployment-cm
                  volumeMounts:
                    - mountPath: /mnt/cms-content
                      name: cms-content-data
                      readOnly: false
                  command:
                    - "/bin/sh"
                    - "-c"
                  args:
                    - "python3 installer.py $ELECTRONICS_THEME_URL $ELECTRONICS_THEME_LOCATION
                    && python3 installer.py $B2B_THEME_URL $B2B_THEME_LOCATION
                    && python3 installer.py $ASSETS_URL $ASSETS_LOCATION"
                containers:
                - name: kubectl-rollout
                  image: bitnami/kubectl
                  command:
                    - "bin/bash"
                    - "-c"
                  args:
                    - "echo Job Started $(date +%Y-%m-%d-%H-%M-%S)
                    && kubectl rollout restart deployment {{inputs.parameters.instance}}-storefront -n {{inputs.parameters.namespace}}"
                volumes:
                - name: cms-content-data
                  persistentVolumeClaim:
                    claimName: "{{inputs.parameters.instance}}-cms-content-volume"
                restartPolicy: Never
            backoffLimit: 2
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: test-init-storefront-template
spec:
  arguments:
    parameters:
      - name: resource
        value: "JSON"
  templates:
    - name: test-init-storefront
      inputs:
        parameters:
          - name: resource
      steps:
      - - name: parse
          template: parser
          arguments:
            parameters:
            - name: json
              value: "{{inputs.parameters.resource}}"
      - - name: installer-content
          template: install-content 
          arguments:
            parameters:
            - name: namespace
              value: "{{steps.parse.outputs.parameters.namespace}}"
            - name: instance
              value: "{{steps.parse.outputs.parameters.instance}}"
            - name: name
              value: "{{steps.parse.outputs.parameters.name}}"
  
    - name: parser
      inputs:
        parameters:
          - name: json
      container:
        image: kkisilevsky/alpine-jq
        command: [sh, -c]
        args:
          - "echo -n '{{inputs.parameters.json}}' | jq -r '.metadata.namespace' > /tmp/namespace.txt
          && echo -n '{{inputs.parameters.json}}' | jq -r '.metadata.labels.instance' > /tmp/instance.txt
          && echo -n '{{inputs.parameters.json}}' | jq -r '.metadata.name' > /tmp/name.txt"
      outputs:
        parameters:
          - name: namespace
            valueFrom:
              path: /tmp/namespace.txt
          - name: instance
            valueFrom:
              path: /tmp/instance.txt
          - name: name
            valueFrom:
              path: /tmp/name.txt

    - name: install-content
      inputs:
        parameters:
          - name: namespace
          - name: instance
          - name: name
      resource:
        action: create
        manifest: |               #put your kubernetes spec here
          apiVersion: batch/v1
          kind: Job
          metadata:
            generateName: content-installer-job-
            namespace: "{{inputs.parameters.namespace}}"
          spec:
            ttlSecondsAfterFinished: 10
            template:
              metadata:
                name: content-installer
              spec:
                initContainers:
                - name: content-installer
                  image: docker.pkg.github.com/virtocommerce/vc-deploy-containers/platform-installer:v3
                  envFrom:
                  - configMapRef:
                      name: {{inputs.parameters.name}}
                  volumeMounts:
                    - mountPath: /mnt/cms-content
                      name: cms-content-data
                      readOnly: false
                  command:
                    - "/bin/sh"
                    - "-c"
                  args:
                    - "python3 installer.py $ELECTRONICS_THEME_URL $ELECTRONICS_THEME_LOCATION
                    && python3 installer.py $B2B_THEME_URL $B2B_THEME_LOCATION
                    && python3 installer.py $ASSETS_URL $ASSETS_LOCATION"
                containers:
                - name: kubectl-rollout
                  image: bitnami/kubectl
                  command:
                    - "bin/bash"
                    - "-c"
                  args:
                    - "echo Job Started $(date +%Y-%m-%d-%H-%M-%S)
                    && kubectl rollout restart deployment {{inputs.parameters.instance}}-storefront -n {{inputs.parameters.namespace}}"
                volumes:
                - name: cms-content-data
                  persistentVolumeClaim:
                    claimName: "{{inputs.parameters.instance}}-cms-content-volume"
                restartPolicy: Never
            backoffLimit: 2